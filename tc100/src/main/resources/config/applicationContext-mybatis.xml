<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd  
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx   
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	<aop:aspectj-autoproxy />

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>

	<!-- 数据源定义 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${ds.initialSize}" />
		<property name="minIdle" value="${ds.minIdle}" />
		<property name="maxActive" value="${ds.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${ds.maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${ds.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${ds.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />

	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:mybatis/*.xml" />

		<!-- PageHelper 分页插件 -->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=mysql

							<!-- 该参数默认为false -->
							<!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 -->
							<!-- 和startPage中的pageNum效果一样 -->
							offsetAsPageNum=true

							<!-- 该参数默认为false -->
							<!-- 设置为true时，使用RowBounds分页会进行count查询 -->
							rowBoundsWithCount=true

							<!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->
							<!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型） -->
							pageSizeZero=true

							<!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 -->
							<!-- 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 -->
							<!-- 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->
							reasonable=true

							<!-- 支持通过Mapper接口参数来传递分页参数 -->
							supportMethodsArguments=true

							<!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page -->
							returnPageInfo=check
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 事务管理 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="NESTED"
				rollback-for="java.lang.Throwable" />
			<tx:method name="add*" propagation="NESTED" rollback-for="java.lang.Throwable" />
			<tx:method name="save*" propagation="NESTED" rollback-for="java.lang.Throwable" />
			<tx:method name="change*" propagation="NESTED"
				rollback-for="java.lang.Throwable" />
			<tx:method name="update*" propagation="NESTED"
				rollback-for="java.lang.Throwable" />
			<tx:method name="delete*" propagation="NESTED"
				rollback-for="java.lang.Throwable" />

			<tx:method name="select*" propagation="NESTED" />
			<tx:method name="get*" propagation="NESTED" />
			<tx:method name="find*" propagation="NESTED" />
			<tx:method name="load*" propagation="NESTED" />
			<tx:method name="count*" propagation="NESTED" />

			<tx:method name="*" propagation="NESTED" />
		</tx:attributes>
	</tx:advice>

	<!-- 事务 aop 配置 -->
	<aop:config>
		<aop:pointcut id="serviceMethods"
			expression="execution(* com.java.service..*.* (..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" />
	</aop:config>

</beans>